import numpy as np
import matplotlib.pyplot as plt
import random as rnd
import math
from scipy.optimize import curve_fit


def epsilon_median(x_i, epsilon, index, actual_median):
    if index == 0:
        actual_median = x_i
    else:
        sign_num = np.sign(x_i - actual_median)
        actual_median = actual_median + sign_num * epsilon
    return actual_median


def two_heaps_median():
    return


def plot_everything(x, dset1, dset2, dset3=0):
    # Plotting
    fig, (ax1, ax2, ax3) = plt.subplots(3, 1)
    fig.suptitle('Median estimations over iterations')
    fig.tight_layout(pad=3.0)

    ax1.set_title("Standard library median estimations")
    ax1.set_ylim(98000, 102000)
    ax1.axhline(y=100000, color='r')
    ax1.axvline(x=0, color='r')
    ax1.grid()
    ax1.scatter(x, dset1)

    ax2.set_title("Epsilon median estimations")
    ax2.set_ylim(98000, 102000)
    ax2.axhline(y=100000, color='r')
    ax2.axvline(x=0, color='r')
    ax2.grid()
    ax2.scatter(x, dset2)

    ax3.set_title("Two-heaps median estimations")
    ax3.set_ylim(98000, 102000)
    ax3.axhline(y=100000, color='r')
    ax3.axvline(x=0, color='r')
    ax3.grid()
    ax3.scatter(x, dset2)


# def plot_histogram(mean, std, input_v, n_bin, k):
#   plt.title("Histogram")
#   plt.hist(input_v, bins=n_bin)

def plot_histogram(mean, std, input_v, n_bin, k, data_size):
    bin_heights, bin_borders = np.histogram(input_v, bins=n_bin, range=(
        mean - k*std, mean + k*std))  # bin heights, bin borders
    bin_widths = np.diff(bin_borders)  # bins[1] - bins[0]
    # valori di bins + met√† bin-size
    bin_centers = bin_borders[:-1] + (bin_widths/2)

    popt, _ = curve_fit(gaussian, bin_centers, bin_heights)

    x_interval_for_fit = np.linspace(
        bin_borders[0], bin_borders[-1], data_size)
    # plt.hist(input_v, bin_centers)
    plt.figure(2)
    plt.bar(bin_centers, bin_heights, width=bin_widths, label='data')
    plt.plot(x_interval_for_fit, gaussian(
        x_interval_for_fit, *popt), label='fit', c='red')
    plt.legend()


# a = N / sqrt(2pi)
# b = x_0, e.g. (x - x_0)^2
# c = 2std^2
def gaussian(x, a, b, c):
    return a * np.exp((-(x-b)**2) / c)


def main():
    # parameters
    mean = pow(10, 5)
    std = math.sqrt(mean)

    # For standard library median
    generated_nums = []  # contains random number generated by the program
    std_medians = []  # contains the list of medians

    # For epsilon median functions
    epsilon = 0.4
    epsilon_x_i = 0
    epsilon_medians = []

    # For two heaps median
    data_size = pow(10, 3)
    x = np.arange(data_size)
    for i in x:
        x_i = rnd.normalvariate(mean, std)

        # Standard library median function
        generated_nums.append(x_i)
        std_medians.append(np.median(generated_nums))

        # Epsilon median
        epsilon_x_i = epsilon_median(x_i, epsilon, i, epsilon_x_i)
        epsilon_medians.append(epsilon_x_i)

    # print("Generated nums:", generated_nums)
    # print("Medians:", std_medians)

    # plot_everything(x, std_medians, epsilon_medians)
    plot_histogram(mean, std, generated_nums, 25, 3, data_size)
    plt.show()


if __name__ == '__main__':
    main()
